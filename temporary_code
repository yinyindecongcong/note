//邻接矩阵的广度遍历
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef vector<vector<int> > G;
void BFS(G g, int s){
    queue <int> Q;
    bool flag[g.size()];
    for (unsigned int i = 0; i < g.size(); i++) flag[i] = 0;
    flag[s] = 1;
    cout << s << ' ';
    Q.push(s);
    while(!Q.empty()){
        int a = Q.front();
        Q.pop();
        for (unsigned int i = 0; i < g.size(); i++)
        if (g[a][i] && !flag[i]){
            cout << i << ' ';
            flag[i] = 1;
            Q.push(i);
        }
    }
}
void BFS2(G g, int s, int dis[]){
    queue <int> Q;
    bool flag[g.size()];
    for (unsigned int i = 0; i < g.size(); i++) flag[i] = 0;
    flag[s] = 1;
    dis[s] = 0;
    cout << s << ' ';
    Q.push(s);
    while(!Q.empty()){
        int a = Q.front();
        Q.pop();
        for (unsigned int i = 0; i < g.size(); i++)
        if (g[a][i] && !flag[i]){
            dis[i] = dis[a] + 1;
            cout << i << ' ';
            flag[i] = 1;
            Q.push(i);
        }
    }
}
G G_init(){
    int size;
    cin >> size;
    vector<int> V(size, 0);
    G g(size, V);
    int n, a, b;
    cin >> n;
    while (n--){
        cin >> a >> b;
        g[a][b] = g[b][a] = 1;
    }
    return g;
}
int main()
{
    G g = G_init();
    int s;
    cin >> s;
    int dis[g.size()];
    BFS2(g, s, dis);
    cout << endl;
    for (int i = 0; i < g.size(); i++) cout << dis[i] << ' ';
    return 0;
}
