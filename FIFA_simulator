//模拟器
class simulator{
public:
  void start();

  bool read32(); //从一个文件读入32只球队信息
  bool show32(); //显示32强并存入team32.txt(包括地区，队名，排名)
  bool draw32(); //分组抽签并显示，并将信息存入finalDraw.txt
  
  bool schedule16(); //安排小组赛赛程并显示，并存入schedule16.txt
  bool simulate16(); //模拟小组赛进程，更新队伍积分等情况
  bool result16();   //按格式显示比赛情况并存入Result16.txt
  
  //根据参数判断对应比赛
  bool show(int); //显示16/8/4/2强并存入team16/8/4/2/1.txt(包括地区，队名，排名)
  bool schedule(int); //安排比赛赛程并显示，并存入schedule8/4/2/1.txt
  bool simulate(int); //模拟比赛进程，更新队伍积分等情况
  bool result(int);   //按格式显示比赛情况并存入Result8/4/2/1.txt
  
  bool showall(); //显示最终结果，包括前十名队伍及射手榜，存入finalStastics.txt
  
private:
  vector<string> court; //12个球场
  vector<team> Vecteam; //32只球队
};

//定义球员
enum POSITION{GK, DF, MF, FW}; //分别为守门员，后卫，中锋，前锋
struct sportsman{
  string name;
  int num; //球衣号码
  POSITION pos;
  int goal; //进球数
  sportsman(){}
  sportsman(string n, int nu, POSOTION p, int g = 0):name(n), num(nu), pos(p), goal(g){}
};
//定义球队
class team{
public:
  team();
  team(string n, int r):nation(n), rank(r), WIN(0), LOST(0), EVEN(0), GF(0), GA(0), GD(0), PTs(0){}
  bool addmember(string n, int nu, POSOTION p, int g = 0);
  bool get_at_de(); //计算attack和defend数值
  void versus(team & A, team & B); //比赛
private:
  string nation;
  int rank;
  int WIN, LOST, EVEN, GF, GA, GD, PTs;
  vector<sportsman> members;
  int attack, defend;
};
