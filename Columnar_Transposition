栅栏易位(Columnar Transposition)
 Columnar transposition
In a columnar transposition, the message is written out in rows of a fixed length, and then read out again column by column, and the columns are chosen in some scrambled order. Both the width of the rows and the permutation of the columns are usually defined by a keyword. For example, the keyword ZEBRAS is of length 6 (so the rows are of length 6), and the permutation is defined by the alphabetical order of the letters in the keyword. In this case, the order would be "6 3 2 4 1 5".
In a regular columnar transposition cipher, any spare spaces are filled with nulls; in an irregular columnar transposition cipher, the spaces are left blank. Finally, the message is read off in columns, in the order specified by the keyword. For example, suppose we use the keyword ZEBRAS and the message WE ARE DISCOVERED. FLEE AT ONCE. In a regular columnar transposition, we write this into the grid as follows:(根据keyword中字母顺序决定读取列的顺序，即从最小字母的位置对应列依次读到最大字母的位置对应列，如A最小且在第五个位置，则先读第五列)
 
       6 3 2 4 1 5 
       W E A R E D 
       I S C O V E 
       R E D F L E 
       E A T O N C  
       E Q K J E U  
 
providing five nulls (QKJEU), these letters can be randomly selected as they just fill out the incomplete columns and are not part of the message. The ciphertext is then read off as:
       EVLNE ACDTK ESEAQ ROFOJ DEECU WIREE 
In the irregular case, the columns are not completed by nulls:
       6 3 2 4 1 5 
       W E A R E D 
       I S C O V E 
       R E D F L E 
       E A T O N C 
       E  
This results in the following ciphertext:
       EVLNA CDTES EAROF ODEEC WIREE 
To decipher it, the recipient has to work out the column lengths by dividing the message length by the key length. Then he can write the message out in columns again, then re-order the columns by reforming the key word.

c++代码实现如下：（只针对第一种，即有补全的加密，此处补全均为符号*）
#include <iostream>
using namespace std;
//确定读取列的顺序
void init(int order[], string key){
    for (int i = 0; i < key.size(); i++) order[i] = i;
    for (int i = 0; i < key.size(); i++)
        for (int j = 0; j < key.size() - i - 1; j++)
            if (key[j] > key[j + 1]){
                char c = key[j]; key[j] = key[j + 1]; key[j + 1] = c;
                int a = order[j]; order[j] = order[j + 1]; order[j + 1] = a;
            }
}
string cipher(const string & s, const string & key){
    string e = "", result = "";
    for (int i = 0; i < s.size(); i++)
        if ((s[i] >= 'a' && s[i] <= 'z') ||(s[i] >= 'A' && s[i] <= 'Z')) e += s[i];
    int k;
    if (k = e.size() % key.size())
        while(k++ < key.size())
            e += '*';
    int order[key.size()];
    init(order, key);
    for (int i = 0; i < key.size(); i++){
        int k = order[i];
        while(k < e.size()){
            result += e[k];
            k += key.size();
        }
    }
    return result;
}
string decipher(const string & s, const string & key){
    int order[key.size()];
    init(order, key);
    string result = s;
    int row = s.size() / key.size();
    for (int i = 0; i < key.size(); i++){
        int k = order[i];
        for (int j = 0; j < row; j++)
            result[k + j * key.size()] = s[j + i * row];
    }
    return result;
}
int main()
{
    string message = "";
    getline(cin, message);
    string key = "";
    cin >> key;
    string s = cipher(message, key);
    cout << s << endl;
    string s1 = decipher(s, key);
    cout << s1 << endl;
    return 0;
}

