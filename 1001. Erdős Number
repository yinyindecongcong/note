Input

Assume that Paul Erdős is numbered 0, other authors are numbered by positive integers between 1 to 100. 
The first line is the number of test cases. Each test case start with the number m of authors in a line, then m pairs of authors are followed. 

Output 

For each test case, each author's Erdős number is printed out, if it is finite, in a separate line in the form "author number: Erdős number" in the order of increasing author number, and finally a dotted line "---" is printed out in a separate line.

//邻接矩阵的广度遍历
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef vector<vector<int> > G;
void BFS(G g, int s){
    queue <int> Q;
    bool flag[g.size()];
    for (unsigned int i = 0; i < g.size(); i++) flag[i] = 0;
    flag[s] = 1;
    cout << s << ' ';
    Q.push(s);
    while(!Q.empty()){
        int a = Q.front();
        Q.pop();
        for (unsigned int i = 0; i < g.size(); i++)
        if (g[a][i] && !flag[i]){
            cout << i << ' ';
            flag[i] = 1;
            Q.push(i);
        }
    }
}
void BFS2(G g, int s, int dis[]){
    queue <int> Q;
    bool flag[g.size()];
    for (unsigned int i = 0; i < g.size(); i++) flag[i] = 0;
    flag[s] = 1;
    dis[s] = 0;
    Q.push(s);
    while(!Q.empty()){
        int a = Q.front();
        Q.pop();
        for (unsigned int i = 0; i < g.size(); i++)
        if (g[a][i] && !flag[i]){
            dis[i] = dis[a] + 1;
            flag[i] = 1;
            Q.push(i);
        }
    }
}
G G_init(){
    //102 * 102
    vector<int> V(102, 0);
    G g(102, V);
    int n, a, b;
    cin >> n;
    while (n--){
        cin >> a >> b;
        g[a][b] = g[b][a] = 1;
    }
    return g;
}
int main()
{
    int t;
    cin >> t;
    while (t--){
        G g = G_init();
        /*int s;
        cin >> s;*/
        int dis[g.size()];
        for (int i = 0; i < g.size(); i++) dis[i] = 0;
        //s = 0
        BFS2(g, 0, dis);
        for (int i = 0; i < g.size(); i++)
            if (dis[i] != 0) cout << i << ':' << dis[i] << endl;
        cout << "---" << endl;
    }
    return 0;
}
